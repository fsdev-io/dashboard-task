{"version":3,"sources":["hooks/useApi.js","pages/dashboard/Card/Card.jsx","pages/dashboard/Card/index.jsx","icons/money.svg","icons/users.svg","icons/sale.svg","icons/complaint.svg","pages/dashboard/Production/Production.jsx","pages/dashboard/Production/index.jsx","pages/dashboard/GeoMap/GeoMap.jsx","pages/dashboard/GeoMap/index.jsx","pages/dashboard/Dashboard.jsx","pages/dashboard/index.jsx","index.jsx"],"names":["scaleModifiers","yearly","monthly","weekly","daily","dataRanges","profit","users","orders","complaints","useApi","endpoint","useState","data","setData","loading","setLoading","callApi","useCallback","payload","setTimeout","Math","floor","random","scale","Option","Select","StyledStatistic","styled","Statistic","Icon","img","CardComponent","name","value","statisticProps","handleChangeScale","icon","xs","sm","lg","title","groupSeparator","defaultValue","onChange","alt","src","Card","type","setScale","useEffect","props","StyledCard","Title","h2","ProductionComponent","chartElement","xl","ref","generateData","factor","Array","map","Production","useRef","chart","current","Chart","labels","keys","datasets","pointRadius","label","fill","borderColor","backgroundColor","options","scales","xAxes","stacked","yAxes","GeoMapComponent","formatter","Intl","NumberFormat","style","currency","GeoMap","fetch","then","response","json","nation","ChartGeo","feature","objects","features","states","state","properties","outline","d","legend","display","tooltips","callbacks","format","xy","projection","Container","div","h1","StyledRow","Row","DashboardComponent","gutter","money","prefix","sale","complaint","Dashboard","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.29df92ae.chunk.js","sourcesContent":["import { useCallback, useState } from \"react\";\n\nconst scaleModifiers = {\n  yearly: 12,\n  monthly: 1,\n  weekly: 0.23,\n  daily: 0.032,\n};\n\nconst dataRanges = {\n  profit: 10000000,\n  users: 1000,\n  orders: 1000,\n  complaints: 30,\n};\n\nconst useApi = (endpoint) => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  // mocked part to generate request data instead of fetching it\n  const callApi = useCallback(\n    (payload) => {\n      setLoading(true);\n      setTimeout(() => {\n        setData(\n          Math.floor(\n            Math.random() *\n              dataRanges[endpoint] *\n              scaleModifiers[payload.scale || \"monthly\"]\n          )\n        );\n        setLoading(false);\n      }, 500);\n    },\n    [endpoint]\n  );\n\n  return {\n    callApi,\n    data,\n    loading,\n  };\n};\n\nexport default useApi;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Card, Col, Select, Statistic } from \"antd\";\n\nconst { Option } = Select;\n\nconst StyledStatistic = styled(Statistic)`\n  margin-bottom: 12px;\n\n  .ant-statistic-title {\n    font-size: 16px;\n    color: rgba(0, 0, 0, 0.7);\n  }\n\n  .ant-skeleton {\n    height: 50px;\n  }\n\n  .ant-statistic-content {\n    font-size: 32px;\n\n    @media (max-width: 576px) {\n      font-size: 28px;\n    }\n  }\n`;\n\nconst Icon = styled.img`\n  position: absolute;\n  height: 100px;\n  right: 16px;\n  bottom: 16px;\n  opacity: 0.15;\n\n  @media (max-width: 576px) {\n    height: 60px;\n  }\n`;\n\nconst CardComponent = ({\n  name,\n  value,\n  loading,\n  statisticProps,\n  scale,\n  handleChangeScale,\n  icon,\n}) => (\n  <Col xs={24} sm={12} lg={6}>\n    <Card>\n      <StyledStatistic\n        title={name}\n        value={value}\n        loading={value === null || loading}\n        groupSeparator=\" \"\n        {...statisticProps}\n      />\n      <Select defaultValue=\"monthly\" value={scale} onChange={handleChangeScale}>\n        <Option value=\"daily\">Daily</Option>\n        <Option value=\"weekly\">Weekly</Option>\n        <Option value=\"monthly\">Monthly</Option>\n        <Option value=\"yearly\">Yearly</Option>\n      </Select>\n      <Icon alt=\"icon\" src={icon} />\n    </Card>\n  </Col>\n);\n\nexport default CardComponent;\n","import React, { useEffect, useState } from \"react\";\nimport useApi from \"../../../hooks/useApi\";\nimport CardComponent from \"./Card\";\n\nconst Card = ({ name, type, icon, ...statisticProps }) => {\n  const [scale, setScale] = useState(\"monthly\");\n  const { data, loading, callApi } = useApi(type);\n\n  useEffect(() => {\n    callApi({ scale });\n  }, [callApi, scale]);\n\n  const props = {\n    name,\n    icon,\n    value: data,\n    loading,\n    scale,\n    statisticProps,\n    handleChangeScale: setScale,\n  };\n\n  return <CardComponent {...props} />;\n};\n\nexport default Card;\n","export default __webpack_public_path__ + \"static/media/money.c8fb18f6.svg\";","export default __webpack_public_path__ + \"static/media/users.f1fd8048.svg\";","export default __webpack_public_path__ + \"static/media/sale.98981f9a.svg\";","export default __webpack_public_path__ + \"static/media/complaint.923f2162.svg\";","import React from \"react\";\nimport { Card, Col } from \"antd\";\nimport styled from \"styled-components\";\n\nconst StyledCard = styled(Card)`\n  @media (max-width: 992px) {\n    .ant-card-body {\n      padding: 0;\n    }\n  }\n`;\n\nconst Title = styled.h2`\n  font-size: 24px;\n\n  @media (max-width: 992px) {\n    padding: 18px;\n  }\n`;\n\nconst ProductionComponent = ({ chartElement }) => (\n  <Col xs={24} xl={12}>\n    <StyledCard>\n      <Title>Production</Title>\n      <canvas ref={chartElement} />\n    </StyledCard>\n  </Col>\n);\n\nexport default ProductionComponent;\n","import React, { useRef, useEffect } from \"react\";\nimport Chart from \"chart.js\";\nimport ProductionComponent from \"./Production\";\n\n// better data generation demonstrated in Cards\nconst generateData = (factor) =>\n  [...Array(30)].map(() => Math.floor(Math.random() * factor));\n\nconst Production = () => {\n  const chartElement = useRef(null);\n  const chart = useRef(null);\n\n  useEffect(() => {\n    chart.current = new Chart(chartElement.current, {\n      type: \"bar\",\n      data: {\n        labels: [...Array(30).keys()],\n        datasets: [\n          {\n            type: \"line\",\n            pointRadius: 0,\n            label: \"Profit margin\",\n            fill: false,\n            borderColor: \"#7d8798\",\n            data: [...Array(30)].map(() => Math.floor(Math.random() * 10 + 35)),\n          },\n          {\n            label: \"2nd grade\",\n            backgroundColor: \"#59C9A5\",\n            borderColor: \"#59C9A5\",\n            data: generateData(15),\n          },\n          {\n            label: \"1st grade\",\n            backgroundColor: \"#56E39F\",\n            borderColor: \"#56E39F\",\n            data: generateData(70),\n          },\n          {\n            label: \"Wasted\",\n            backgroundColor: \"#EF6F6C\",\n            borderColor: \"#EF6F6C\",\n            data: generateData(-10),\n          },\n        ],\n      },\n\n      options: {\n        scales: {\n          xAxes: [\n            {\n              stacked: true,\n            },\n          ],\n          yAxes: [\n            {\n              stacked: true,\n            },\n          ],\n        },\n      },\n    });\n  });\n\n  const props = { chartElement };\n\n  return <ProductionComponent {...props} />;\n};\n\nexport default Production;\n","import React from \"react\";\nimport { Card, Col } from \"antd\";\nimport styled from \"styled-components\";\n\nconst StyledCard = styled(Card)`\n  @media (max-width: 992px) {\n    .ant-card-body {\n      padding: 0;\n    }\n  }\n`;\n\nconst Title = styled.h2`\n  font-size: 24px;\n\n  @media (max-width: 992px) {\n    padding: 18px;\n  }\n`;\n\nconst GeoMapComponent = ({ chartElement }) => (\n  <Col xs={24} xl={12}>\n    <StyledCard>\n      <Title>Sales Revenue by State</Title>\n      <canvas ref={chartElement} />\n    </StyledCard>\n  </Col>\n);\n\nexport default GeoMapComponent;\n","import React, { useEffect, useRef } from \"react\";\nimport Chart from \"chart.js\";\nimport * as ChartGeo from \"chartjs-chart-geo\";\nimport GeoMapComponent from \"./GeoMap\";\n\nconst formatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n});\n\nconst GeoMap = () => {\n  const chartElement = useRef(null);\n  const chart = useRef(null);\n\n  useEffect(() => {\n    fetch(\"https://unpkg.com/us-atlas/states-10m.json\")\n      .then((response) => response.json())\n      .then((data) => {\n        const nation = ChartGeo.topojson.feature(data, data.objects.nation)\n          .features[0];\n        const states = ChartGeo.topojson.feature(data, data.objects.states)\n          .features;\n\n        chart.current = new Chart(chartElement.current, {\n          type: \"choropleth\",\n          data: {\n            labels: states.map((state) => state.properties.name),\n            datasets: [\n              {\n                label: \"States\",\n                outline: nation,\n                data: states.map((d) => ({\n                  feature: d,\n                  value: Math.floor(Math.random() * 300000),\n                })),\n              },\n            ],\n          },\n          options: {\n            legend: {\n              display: false,\n            },\n            tooltips: {\n              callbacks: {\n                label: ({ value }) => formatter.format(value),\n              },\n            },\n            scales: {\n              xy: {\n                projection: \"albersUsa\",\n              },\n            },\n          },\n        });\n      });\n  }, []);\n\n  const props = { chartElement };\n\n  return <GeoMapComponent {...props} />;\n};\n\nexport default GeoMap;\n","import React from \"react\";\nimport { Row } from \"antd\";\nimport styled from \"styled-components\";\nimport Card from \"./Card\";\n\nimport money from \"../../icons/money.svg\";\nimport users from \"../../icons/users.svg\";\nimport sale from \"../../icons/sale.svg\";\nimport complaint from \"../../icons/complaint.svg\";\nimport Production from \"./Production\";\nimport GeoMap from \"./GeoMap\";\n\nconst Container = styled.div`\n  padding: 16px;\n`;\n\nconst Title = styled.h1`\n  margin: 12px 0 18px 20px;\n`;\n\nconst StyledRow = styled(Row)`\n  margin-bottom: 16px;\n`;\n\nconst DashboardComponent = ({ data }) => (\n  <Container>\n    <Title>React Dashboard</Title>\n    <StyledRow gutter={[16, 16]}>\n      <Card name=\"Total Profit\" type=\"profit\" icon={money} prefix=\"$\" />\n      <Card name=\"Active Users\" type=\"users\" icon={users} />\n      <Card name=\"New Orders\" type=\"orders\" icon={sale} />\n      <Card name=\"Open Complaints\" type=\"complaints\" icon={complaint} />\n    </StyledRow>\n    <Row gutter={[16, 16]}>\n      <Production />\n      <GeoMap />\n    </Row>\n  </Container>\n);\n\nexport default DashboardComponent;\n","import React from \"react\";\nimport DashboardComponent from \"./Dashboard\";\n\nconst Dashboard = () => {\n  const props = {};\n\n  return <DashboardComponent {...props} />;\n};\n\nexport default Dashboard;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Dashboard from \"./pages/dashboard\";\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Dashboard />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}